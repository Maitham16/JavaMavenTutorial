Multi-module Projects: In larger projects, it's common to break the codebase into multiple 
modules to make the project more manageable. 
Maven provides support for creating multi-module projects, where each module has its own POM,
but they are all tied together by a parent POM.

my-app
│   pom.xml (Parent POM)
│
└───module-1
│   │   pom.xml (Module 1 POM)
│   
└───module-2
    │   pom.xml (Module 2 POM)

The parent POM is defined in the pom.xml file in the root directory of the project.
    <groupId>com.example</groupId>
    <artifactId>my-app</artifactId>
    <version>1.0.0</version>
    <packaging>pom</packaging>

    <modules>
        <module>module-1</module>
        <module>module-2</module>
    </modules>

The POMs for the module-1 pom.xml:
    <parent>
        <groupId>com.example</groupId>
        <artifactId>my-app</artifactId>
        <version>1.0.0</version>
    </parent>

    <artifactId>module-1</artifactId>
    <packaging>jar</packaging>

The POMs for the module-2 pom.xml:
    <parent>
        <groupId>com.example</groupId>
        <artifactId>my-app</artifactId>
        <version>1.0.0</version>
    </parent>

    <artifactId>module-2</artifactId>
    <packaging>jar</packaging>

With this setup, running mvn install at the parent project level (my-app/) will build all 
the modules. Furthermore, settings, dependencies, and plugins specified in the parent POM 
are inherited by the module POMs, although they can be overridden.